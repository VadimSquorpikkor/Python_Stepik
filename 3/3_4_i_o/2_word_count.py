# Недавно мы считали для каждого слова количество его вхождений в строку. Но на все слова может быть не так интересно
# смотреть, как, например, на наиболее часто используемые.
#
# Напишите программу, которая считывает текст из файла (в файле может быть больше одной строки) и выводит самое частое
# слово в этом тексте и через пробел то, сколько раз оно встретилось. Если таких слов несколько, вывести
# лексикографически первое (можно использовать оператор < для строк).
#
# Слова, написанные в разных регистрах, считаются одинаковыми.
#
# Sample Input:
# abc a bCd bC AbC BC BCD bcd ABC
#
# Sample Output:
# abc 3
#
# У вас есть неограниченное число попыток.
# Время одной попытки: 5 mins

with open('2_file.txt') as in_file:
    stroke = in_file.read().strip().lower().split()

max_count = 0
max_string = ''
for s in stroke:
    if stroke.count(s) > max_count or (stroke.count(s) == max_count and s < max_string):
        max_string = s
        max_count = stroke.count(s)

out = str(max_string) + ' ' + str(max_count)

with open('2_file_out.txt', 'w') as out_file:
    out_file.write(out)

########################################################################################
# Алексей Волков
# Задачу решил при помощи тех знаний, что были даны на предыдущих уроках - прогоном через циклы списков и словарей.
# Начал тестировать. Загрузил в программу текст Конституции РФ, обработка заняла около 7-ми секунд, вроде ничего,
# но когда подгрузил Библию (Ветхий и Новый завет в одном файле), подвесил систему минут на 40 (больше ждать не стал,
# терпения не хватило). В комментариях прочёл про collections, взял в решениях потестировать код с этим модулем,
# Библию секунды за 2 просканировал.. Вывод:  модули - полезная штука
